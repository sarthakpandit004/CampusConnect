// 'use client';

// import { useSession } from 'next-auth/react';
// import { useState } from 'react';
// import SkillCard from './components/SkillCard';
// import BookingModal from './components/BookingModal';
// import RescheduleModal from './components/RescheduleModal';
// import { useSkills } from './hooks/useSkills';
// import { useRequests } from './hooks/useRequests';
// import { useBookings } from './hooks/useBookings';

// export default function SkillSwapPage() {
//   const { data: session, status } = useSession();

//   const { skills, addSkill, updateSkill, deleteSkill } = useSkills(session);
//   const { incomingRequests, outgoingRequests, sendRequest, updateRequestStatus } = useRequests(session);
//   const {
//     myBookings,
//     bookSession,
//     cancelBooking,
//     rescheduleBooking
//   } = useBookings(session);

//   const [form, setForm] = useState({ title: '', description: '', duration: '', category: '' });
//   const [file, setFile] = useState(null);
//   const [editingSkill, setEditingSkill] = useState(null);
//   const [selectedSkillForBooking, setSelectedSkillForBooking] = useState(null);
//   const [selectedTimeSlot, setSelectedTimeSlot] = useState('');
//   const [bookingModalOpen, setBookingModalOpen] = useState(false);
//   const [rescheduleModalOpen, setRescheduleModalOpen] = useState(false);
//   const [bookingToReschedule, setBookingToReschedule] = useState(null);
//   const [newTimeSlot, setNewTimeSlot] = useState('');
//   const [filterCategory, setFilterCategory] = useState('');
//   const [filterText, setFilterText] = useState('');

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     let mediaUrl = '';
//     let mediaType = '';

//     if (file) {
//       const fileType = file.type;
//       const isVideo = fileType.startsWith('video/');
//       const isPDF = fileType === 'application/pdf';

//       if (isVideo || isPDF) {
//         const storageRef = `https://fake-storage-url.com/${file.name}`;
//         mediaUrl = storageRef;
//         mediaType = isVideo ? 'video' : 'pdf';
//       }
//     }

//     await addSkill(form, mediaUrl, mediaType);
//     setForm({ title: '', description: '', duration: '', category: '' });
//     setFile(null);
//   };

//   const handleEdit = (skill) => {
//     setEditingSkill(skill.id);
//     setForm({
//       title: skill.title,
//       description: skill.description,
//       duration: skill.duration,
//       category: skill.category,
//     });
//   };

//   const handleSave = async (id) => {
//     await updateSkill(id, form);
//     setEditingSkill(null);
//     setForm({ title: '', description: '', duration: '', category: '' });
//   };

//   const handleCancelEdit = () => {
//     setEditingSkill(null);
//     setForm({ title: '', description: '', duration: '', category: '' });
//   };

//   const handleRequestSkill = async (skill) => {
//     await sendRequest(skill);
//   };

//   const openBookingModal = (skill) => {
//     setSelectedSkillForBooking(skill);
//     setSelectedTimeSlot('');
//     setBookingModalOpen(true);
//   };

//   const handleBookingSubmit = async () => {
//     if (!selectedTimeSlot || !selectedSkillForBooking) return;
//     await bookSession(selectedSkillForBooking, new Date(selectedTimeSlot).toISOString());
//     setBookingModalOpen(false);
//   };

//   const handleReschedule = (booking) => {
//     setBookingToReschedule(booking);
//     setNewTimeSlot('');
//     setRescheduleModalOpen(true);
//   };

//   const handleRescheduleSubmit = async () => {
//     if (!bookingToReschedule || !newTimeSlot) return;
//     await rescheduleBooking(bookingToReschedule.id, new Date(newTimeSlot).toISOString());
//     setRescheduleModalOpen(false);
//   };

//   const filteredSkills = skills.filter((skill) => {
//     const matchesCategory = filterCategory ? skill.category === filterCategory : true;
//     const matchesText =
//       skill.title.toLowerCase().includes(filterText.toLowerCase()) ||
//       skill.description.toLowerCase().includes(filterText.toLowerCase());
//     return matchesCategory && matchesText;
//   });

//   if (status !== 'authenticated') {
//     return <p className="p-10 text-center">Please sign in to access the skill portal.</p>;
//   }

//   return (
//     <main className="p-6 max-w-3xl mx-auto space-y-10">
//       <h2 className="text-2xl font-bold text-center text-indigo-700">Skill Sharing</h2>

//       {/* Skill Submission Form */}
//       <form onSubmit={handleSubmit} className="bg-white p-4 rounded shadow space-y-3">
//         <h3 className="text-lg font-semibold">Post a Skill</h3>
//         <input className="border p-2 w-full rounded" placeholder="Title" value={form.title} onChange={(e) => setForm({ ...form, title: e.target.value })} />
//         <textarea className="border p-2 w-full rounded" placeholder="Description" value={form.description} onChange={(e) => setForm({ ...form, description: e.target.value })} />
//         <select className="border p-2 w-full rounded" value={form.duration} onChange={(e) => setForm({ ...form, duration: e.target.value })}>
//           <option value="">Duration</option>
//           <option value="15 mins">15 mins</option>
//           <option value="30 mins">30 mins</option>
//           <option value="1 hour">1 hour</option>
//         </select>
//         <select className="border p-2 w-full rounded" value={form.category} onChange={(e) => setForm({ ...form, category: e.target.value })}>
//           <option value="">Category</option>
//           <option value="Programming">Programming</option>
//           <option value="Web Development">Web Development</option>
//           <option value="Machine Learning">Machine Learning</option>
//           <option value="Aptitude">Aptitude</option>
//           <option value="Notes">Notes</option>
//         </select>
//         <input type="file" onChange={(e) => setFile(e.target.files[0])} />
//         <button type="submit" className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700">Post</button>
//       </form>

//       {/* Filter Controls */}
//       <div className="flex flex-wrap gap-2 items-center">
//         <select
//           value={filterCategory}
//           onChange={(e) => setFilterCategory(e.target.value)}
//           className="border p-2 rounded"
//         >
//           <option value="">All Categories</option>
//           <option value="Programming">Programming</option>
//           <option value="Web Development">Web Development</option>
//           <option value="Machine Learning">Machine Learning</option>
//           <option value="Aptitude">Aptitude</option>
//           <option value="Notes">Notes</option>
//         </select>

//         <input
//           type="text"
//           placeholder="Search..."
//           className="border p-2 rounded flex-1"
//           value={filterText}
//           onChange={(e) => setFilterText(e.target.value)}
//         />
//       </div>

//       {/* Skill Cards */}
//       <div className="grid grid-cols-1 gap-6">
//         {filteredSkills.map((skill) => (
//           <SkillCard
//             key={skill.id}
//             skill={skill}
//             session={session}
//             isOwner={skill.userEmail === session.user.email}
//             editing={editingSkill === skill.id}
//             form={form}
//             onEdit={handleEdit}
//             onDelete={deleteSkill}
//             onRequest={handleRequestSkill}
//             onBook={openBookingModal}
//             onChange={setForm}
//             onSave={handleSave}
//             onCancel={handleCancelEdit}
//           />
//         ))}
//       </div>

//       {/* Booking Modal */}
//       {bookingModalOpen && selectedSkillForBooking && (
//         <BookingModal
//           skill={selectedSkillForBooking}
//           selectedTimeSlot={selectedTimeSlot}
//           setSelectedTimeSlot={setSelectedTimeSlot}
//           onConfirm={handleBookingSubmit}
//           onClose={() => setBookingModalOpen(false)}
//         />
//       )}

//       {/* Reschedule Modal */}
//       {rescheduleModalOpen && bookingToReschedule && (
//         <RescheduleModal
//           booking={bookingToReschedule}
//           newTimeSlot={newTimeSlot}
//           setNewTimeSlot={setNewTimeSlot}
//           onConfirm={handleRescheduleSubmit}
//           onClose={() => setRescheduleModalOpen(false)}
//         />
//       )}
//     </main>
//   );
// }



















'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { db } from '@/lib/firebase';
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc, serverTimestamp } from 'firebase/firestore';
import { useSession } from 'next-auth/react';
import { Calendar, dateFnsLocalizer } from 'react-big-calendar';
import { format, parse, startOfWeek, getDay } from 'date-fns';
import 'react-big-calendar/lib/css/react-big-calendar.css';

import Link from 'next/link';

export default function SkillSwapPage() {
  const router = useRouter();
  const { data: sessions, status } = useSession();

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.replace('/api/auth/signin');
    }
  }, [status, router]);
 
  const locales = {
  'en-US': require('date-fns/locale/en-US'),
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});


  const [incomingRequests, setIncomingRequests] = useState([]);
  const [outgoingRequests, setOutgoingRequests] = useState([]);
  const [file, setFile] = useState(null);
  
  const [bookingModalOpen, setBookingModalOpen] = useState(false);
const [selectedSkillForBooking, setSelectedSkillForBooking] = useState(null);
const [selectedTimeSlot, setSelectedTimeSlot] = useState('');
const [myBookings, setMyBookings] = useState([]);
const [rescheduleModalOpen, setRescheduleModalOpen] = useState(false);
const [bookingToReschedule, setBookingToReschedule] = useState(null);
const [newTimeSlot, setNewTimeSlot] = useState('');
const [calendarEvents, setCalendarEvents] = useState([]);




  const [skills, setSkills] = useState([]);
  const [form, setForm] = useState({
    title: '',
    description: '',
    duration: '15 mins',
    category: '',
    Documents: " : FILE/VIDEO"
  });
  const [selectedCategory, setSelectedCategory] = useState("");
  const [editingId, setEditingId] = useState(null);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };






  const handleSubmit = async (e) => {
    e.preventDefault();

    let mediaUrl = "";
let mediaType = "";

if (file) {
  const formData = new FormData();
  formData.append("file", file);
formData.append("upload_preset", "campusconnect_skills"); 
formData.append("cloud_name", "dajndivjw");                



  try {
    const res = await fetch("https://api.cloudinary.com/v1_1/dajndivjw/auto/upload?resource_type=raw", {
      method: "POST",
      body: formData,
    });

    const data = await res.json();

    if (data.secure_url) {
      mediaUrl = data.secure_url;

      if (file.type.includes("video")) {
      mediaType = "video";
    } else if (file.type === "application/pdf") {
      mediaType = "pdf";
    } else {
      mediaType = "other";
    }

      console.log("Cloudinary upload successful:", mediaUrl);
    } else {
      console.error("Cloudinary Upload Failed:", data);
      alert("Media upload failed. Please try again or check credentials.");
      return;
    }

  } catch (error) {
    console.error("Upload error:", error);
    alert("An error occurred during media upload.");
    return;
  }
}


    // let mediaType = null;
    // if (file) {
    //   if (file.type.startsWith("video/")) mediaType = "video";
    //   else if (file.type === "application/pdf") mediaType = "pdf";
    // }


    if (status === 'loading') {
      alert("Session is still loading. Please wait a moment.");
      return;
    }
    if (status !== 'authenticated' || !sessions?.user?.email) {
      alert("User not authenticated. Please sign in again.");
      return;
    }
    try {
      await addDoc(collection(db, 'skills'), {
        ...form,
        userEmail: sessions.user.email,
        mediaUrl,
        mediaType

      });
      setForm({ title: '', description: '', duration: '15 mins', category: '' ,  Documents: ': No file chosen '});
      fetchSkills();
    } catch (err) {
      console.error('Error adding skill:', err);
    }
  };





  const fetchSkills = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, 'skills'));
      const allSkills = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setSkills(allSkills);
    } catch (err) {
      console.error('Error fetching skills:', err);
    }
  };

  const fetchRequests = async () => {
  if (!sessions?.user?.email) return;

  try {
    const querySnapshot = await getDocs(collection(db, 'requests'));
    const allRequests = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    const incoming = allRequests.filter(r => r.receiverEmail === sessions.user.email);
    const outgoing = allRequests.filter(r => r.senderEmail === sessions.user.email);

    setIncomingRequests(incoming);
    setOutgoingRequests(outgoing);
  } catch (error) {
    console.error("Error fetching requests:", error);
  }
};


  const handleEdit = (skill) => {
    setForm({
      title: skill.title,
      description: skill.description,
      duration: skill.duration,
      category: skill.category || '',
    });
    setEditingId(skill.id);
  };

  const handleSave = async (id) => {
    try {
      const skillRef = doc(db, "skills", id);
      await updateDoc(skillRef, form);
      setEditingId(null);
      setForm({ title: '', description: '', duration: '15 mins', category: '', Documents: ': No file chosen ' });
      fetchSkills();
    } catch (error) {
      console.error("Error updating skill:", error);
    }
  };

  const handleDelete = async (id) => {
    try {
      await deleteDoc(doc(db, "skills", id));
      fetchSkills();
    } catch (err) {
      console.error("Error deleting skill:", err);
    }
  };

    const handleRequestStatusChange = async (id, newStatus) => {
  try {
    const ref = doc(db, 'requests', id);
    await updateDoc(ref, { status: newStatus });
    fetchRequests(); // refresh after update
  } catch (err) {
    console.error("Failed to update request status:", err);
  }
};

  const handleRequestSkill = async (skill) => {
  if (status !== 'authenticated' || !sessions?.user?.email) {
    alert("Please sign in to request a skill.");
    return;
  }

  try {
    await addDoc(collection(db, 'requests'), {
      skillId: skill.id,
      skillTitle: skill.title,
      senderEmail: sessions.user.email,
      receiverEmail: skill.userEmail,
      status: "pending",
      timestamp: serverTimestamp()
    });
    alert("Request sent successfully!");
  } catch (err) {
    console.error("Failed to send request:", err);
    alert("Something went wrong. Try again.");
  }
};


const handleBookingSubmit = async () => {
  if (!selectedTimeSlot || !selectedSkillForBooking) {
    alert("Please pick a time first!");
    return;
  }

  try {
    await addDoc(collection(db, 'bookings'), {
      skillId: selectedSkillForBooking.id,
      skillTitle: selectedSkillForBooking.title,
      learnerEmail: sessions.user.email,
      teacherEmail: selectedSkillForBooking.userEmail,
      timeSlot: new Date(selectedTimeSlot).toISOString(),
      status: 'confirmed'
    });

    alert('Booking confirmed!');
    setBookingModalOpen(false);
  } catch (err) {
    console.error("Booking failed:", err);
    alert("Something went wrong. Try again later.");
  }
};

const fetchBookings = async () => {
  if (!sessions?.user?.email) return;

  try {
    const querySnapshot = await getDocs(collection(db, 'bookings'));
    const all = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

    const filtered = all.filter(
      b =>
        b.learnerEmail === sessions.user.email ||
        b.teacherEmail === sessions.user.email
    );

    setMyBookings(filtered);

    const events = filtered.map((booking) => ({
      title: `Skill: ${booking.skillTitle}`,
      start: new Date(booking.timeSlot),
      end: new Date(new Date(booking.timeSlot).getTime() + 15 * 60000),
      resource: booking, 
    }));

    setCalendarEvents(events);
  } catch (err) {
    console.error("Error fetching bookings:", err);
  }
};

const handleCancelBooking = async (id) => {
  try {
    const bookingRef = doc(db, 'bookings', id);
    await updateDoc(bookingRef, { status: 'cancelled' });
    alert('Booking cancelled.');
    fetchBookings(); // refresh list
  } catch (err) {
    console.error('Cancel failed:', err);
    alert('Something went wrong. Try again.');
  }
};

const handleRescheduleBooking = async () => {
  if (!newTimeSlot || !bookingToReschedule) {
    alert('Pick a new time first!');
    return;
  }

  try {
    const ref = doc(db, 'bookings', bookingToReschedule.id);
    await updateDoc(ref, {
      timeSlot: new Date(newTimeSlot).toISOString(),
      status: 'confirmed'
    });

    alert('Booking updated.');
    setRescheduleModalOpen(false);
    fetchBookings(); // refresh view
  } catch (err) {
    console.error("Reschedule failed:", err);
    alert("Something went wrong. Try again.");
  }
};



  useEffect(() => {
    if (status === 'authenticated' && sessions?.user?.email) {
      fetchSkills();
      fetchRequests();
      fetchBookings();

    }
  }, [status, sessions?.user?.email]);



  

  return (
    <main className="min-h-screen bg-gradient-to-br from-white to-blue-50 px-6 py-10">
      <div className="max-w-6xl mx-auto">
        <div className="mb-10">
          <button
            onClick={() => router.back()}
            className="text-indigo-600 hover:text-indigo-800 mb-2 block"
          >
            ← Back to Dashboard
          </button>
          
          <h1 className="text-4xl font-bold text-gray-800">SkillSwap</h1>
          <p className="text-gray-600 text-lg mt-1">
            Share your skills or learn from your peers in bite-sized sessions.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <aside className="md:col-span-1 bg-white rounded-xl shadow p-5 h-fit">
            <h3 className="text-lg font-semibold mb-3 text-indigo-600">Filters</h3>
            <ul className="space-y-2 text-gray-600 text-sm">
              <li className="cursor-pointer hover:text-indigo-500">Programming</li>
              <li className="cursor-pointer hover:text-indigo-500">Design</li>
              <li className="cursor-pointer hover:text-indigo-500">Soft Skills</li>
              <li className="cursor-pointer hover:text-indigo-500">Short Sessions</li>
            </ul>
          </aside>

          <section className="md:col-span-3 space-y-8">
            <div className="bg-white rounded-xl shadow p-6">
              <h2 className="text-2xl font-semibold mb-4 text-gray-800">Offer a Skill</h2>
              <form onSubmit={handleSubmit} className="space-y-4">
                <input type="text" name="title" value={form.title} onChange={handleChange} placeholder="e.g. Figma for Beginners" className="w-full border p-3 rounded-md" required />
                <textarea name="description" value={form.description} onChange={handleChange} placeholder="Brief description of what you'll teach" className="w-full border p-3 rounded-md" required />
                <select name="duration" value={form.duration} onChange={handleChange} className="w-full border p-3 rounded-md">
                  <option value="15 mins">15 mins</option>
                  <option value="30 mins">30 mins</option>
                  <option value="1 hour">1 hour</option>
                </select>
                <select name='category' value={form.category} onChange={(e) => setForm({ ...form, category: e.target.value })} className="w-full mt-2 p-2 border rounded">
                  <option value="">Select Category</option>
                  <option value="Programming">Programming</option>
                  <option value="Web Development">Web Development</option>
                  <option value="Machine Learning">Machine Learning</option>
                  <option value="Aptitude">Aptitude</option>
                  <option value="Notes">Notes</option>
                </select>

                <input
                    name='Documents'
                    type="file"
                    placeholder='ChoOse File: No File Chosen'
                    accept="video/*,application/pdf"
                    onChange={(e) => setFile(e.target.files[0])}
                    className="w-full mt-2 p-2 border rounded"
                  />

                  


                <button type="submit" className="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-6 py-2 rounded-md">
                  Post Skill
                </button>
              </form>
            </div>

            {skills.length > 0 && (
              <>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Category</label>
                  <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)} className="border p-2 rounded w-full sm:w-64">
                    <option value="">All Categories</option>
                    <option value="Programming">Programming</option>
                    <option value="Web Development">Web Development</option>
                    <option value="Machine Learning">Machine Learning</option>
                    <option value="Aptitude">Aptitude</option>
                    <option value="Notes">Notes</option>
                  </select>
                </div>

                <div className="space-y-4">
                  <h3 className="text-xl font-semibold text-gray-700">All Skills</h3>


{/*editing for the skill cards  +  the skill card ui */}
                  {skills.filter(skill => !selectedCategory || skill.category === selectedCategory).map((skill, idx) => {
                    const isOwner = skill.userEmail === sessions?.user?.email;
                    return (
                      <div key={idx} className="bg-white border border-gray-200 p-5 rounded-lg shadow-sm hover:shadow-md transition">
                        <div className="flex justify-between items-start">
                          <div>
                            {editingId === skill.id && isOwner ? (
                              <>
                                <input className="border p-2 mb-2 rounded w-full" value={form.title} onChange={(e) => setForm({ ...form, title: e.target.value })} />
                                <textarea className="border p-2 mb-2 rounded w-full" value={form.description} onChange={(e) => setForm({ ...form, description: e.target.value })} />
                                <select className="border p-2 mb-2 rounded w-full" value={form.duration} onChange={(e) => setForm({ ...form, duration: e.target.value })}>
                                  <option value="15 mins">15 mins</option>
                                  <option value="30 mins">30 mins</option>
                                  <option value="1 hour">1 hour</option>
                                </select>
                                <select className="border p-2 mb-2 rounded w-full" value={form.category} onChange={(e) => setForm({ ...form, category: e.target.value })}>
                                  <option value="">Select Category</option>
                                  <option value="Programming">Programming</option>
                                  <option value="Web Development">Web Development</option>
                                  <option value="Machine Learning">Machine Learning</option>
                                  <option value="Aptitude">Aptitude</option>
                                  <option value="Notes">Notes</option>
                                </select>
                                <div className="flex gap-3 mt-2">
                                  <button onClick={() => handleSave(skill.id)} className="text-sm text-green-600 hover:underline">Save</button>
                                  <button onClick={() => setEditingId(null)} className="text-sm text-gray-600 hover:underline">Cancel</button>
                                </div>
                              </>
                            ) : (
                              <>
                                <h4 className="text-lg font-bold text-gray-800">{skill.title}</h4>
                                <p className="text-gray-600">{skill.description}</p>
                                <p className="text-sm text-gray-500 mt-1">⏱ {skill.duration}</p>
                                <p className="text-sm mt-2 text-indigo-600 font-medium">📚 Category: {skill.category || 'Uncategorized'}</p>
                                <p className="text-sm text-gray-500 mt-1">🧑‍🎓 Posted by: {skill.userEmail || 'Unknown'}</p>
                                

{/* {skill.mediaUrl && skill.mediaType === 'video' && (
  <video controls className=" m-3.5 h-full w-full rounded-lg ">
    <source src={skill.mediaUrl} type="video/mp4" />
    Your browser does not support the video tag.
  </video>
)}
  
{skill.mediaUrl && skill.mediaType === 'pdf' && (
  <a
    href={`https://res.cloudinary.com/dajndivjw/raw/upload/${extractPublicId(skill.mediaUrl)}`}
    target="_blank"
    rel="noopener noreferrer"
    className="inline-block mt-3 text-indigo-600 underline text-sm"
  >
    📄 View Uploaded PDF
  </a>
)} */}

{skill.mediaUrl && skill.mediaType === 'video' && (
  <video controls className="m-3.5 h-full w-full rounded-lg">
    <source src={skill.mediaUrl} type="video/mp4" />
    Your browser does not support the video tag.
  </video>
)}

{skill.mediaUrl && skill.mediaType === 'pdf' && (
  <iframe
    src={skill.mediaUrl}
    className="w-full mt-3 h-[500px] border rounded"
    title="PDF Document"
  >
    This browser does not support PDFs. Please download the PDF to view it: 
    <a href={skill.mediaUrl}>Download PDF</a>
  </iframe>
)}








                            {isOwner ? (
                              <div className="flex gap-3 mt-3">
                                <button onClick={() => handleEdit(skill)} className="text-sm text-blue-600 hover:underline">
                                  Edit
                                </button>
                                <button onClick={() => handleDelete(skill.id)} className="text-sm text-red-600 hover:underline">
                                  Delete
                                </button>
                              </div>
                            ) : (
                                  <div className="flex flex-col sm:flex-row gap-2 mt-3">
                              <button
                                onClick={() => handleRequestSkill(skill)}
                                className="mt-3 inline-block px-4 py-2 text-sm text-white bg-indigo-600 hover:bg-indigo-700 rounded"
                              >
                                Request to Learn
                              </button>
                              <button
                                onClick={() => {
                                  setSelectedSkillForBooking(skill);
                                  setBookingModalOpen(true);
                                }}
                                className="mt-3 inline-block px-4 py-2 text-sm text-white bg-indigo-600 hover:bg-indigo-700 rounded"
                              >
                                📅 Book Session
                              </button>
                            </div>
                            )}
                          </>
                            )}
                          </div>
                          <div className="bg-indigo-100 text-indigo-700 px-3 py-1 rounded-full text-sm font-medium">CS Dept</div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </>
            )}

            {/* Requests Section */}
            <div className="mt-10 space-y-6">
  <h3 className="text-xl font-semibold text-gray-700">📅 Your Bookings</h3>

  {myBookings.length === 0 ? (
    <p className="text-gray-500">No bookings yet.</p>
  ) : (
    <ul className="space-y-3">
      {myBookings.map((booking, i) => (
        <li key={i} className="bg-white border rounded p-4 shadow-sm">
          <p className="text-sm text-gray-700 font-medium">
            <span className="text-indigo-600">Skill:</span> {booking.skillTitle}
          </p>
          <p className="text-sm text-gray-600">
            <span className="text-gray-500">Time:</span>{" "}
            {new Date(booking.timeSlot).toLocaleString()}
          </p>
          <p className="text-sm text-gray-600">
            <span className="text-gray-500">With:</span>{" "}
            {sessions.user.email === booking.learnerEmail
              ? booking.teacherEmail
              : booking.learnerEmail}
          </p>
              <p className={`text-sm font-semibold mb-2 ${
              booking.status === 'cancelled'
                      ? 'text-red-500'
                      : booking.status === 'confirmed'
                      ? 'text-green-600'
                      : 'text-gray-500'
                  }`}>
              Status: {booking.status}
             </p>
                <div>
                {booking.status === 'confirmed' && (
                  <button
                    onClick={() => {
                      setBookingToReschedule(booking);
                      setNewTimeSlot('');
                      setRescheduleModalOpen(true);
                    }}
                    className="text-sm text-indigo-600 hover:underline ml-3"
                  >
                    Reschedule
                  </button>
                )}
                </div>
          <button
            onClick={() => handleCancelBooking(booking.id)}
            className="text-sm text-red-600 hover:underline"
          >
            Cancel Booking
          </button>

        </li>
      ))}
    </ul>
  )}
</div>

<div className="mt-10 space-y-8">
  <div>
    <h3 className="text-xl font-semibold text-gray-700 mb-2">📥 Incoming Requests</h3>
    {incomingRequests.length === 0 ? (
      <p className="text-gray-500">No one has requested your skills yet.</p>
    ) : (
      <ul className="space-y-3">
       {incomingRequests.map((req, i) => (
      <li key={i} className="bg-white border rounded p-3">
        <p><strong>{req.skillTitle}</strong> requested by {req.senderEmail}</p>
        <p className="text-sm text-gray-600 mb-2">Status: {req.status}</p>
                    <p className="text-sm">
  Status:{" "}
  <span
    className={`inline-block px-2 py-1 rounded text-white text-xs font-medium ${
      req.status === "pending"
        ? "bg-yellow-100"
        : req.status === "accepted"
        ? "bg-green-600"
        : "bg-red-600"
    }`}
  >
    {req.status}
  </span>
</p>
        {req.status === 'pending' && (
          <div className="space-x-3">
            <button
              onClick={() => handleRequestStatusChange(req.id, 'accepted')}
              className="text-green-600 hover:underline"
            >
              Accept
            </button>
            <button
              onClick={() => handleRequestStatusChange(req.id, 'declined')}
              className="text-red-600 hover:underline"
            >
              Decline
            </button>

          </div>
        )}
      </li>
    ))}

      </ul>
    )}
  </div>

  <div>
    <h3 className="text-xl font-semibold text-gray-700 mb-2">📤 Sent Requests</h3>
    {outgoingRequests.length === 0 ? (
      <p className="text-gray-500">You haven’t sent any requests yet.</p>
    ) : (
      <ul className="space-y-3">
        {outgoingRequests.map((req, i) => (
          <li key={i} className="bg-white border rounded p-3">
            <p><strong>{req.skillTitle}</strong> to {req.receiverEmail}</p>
            <p className="text-sm text-gray-600">Status: {req.status}</p>
            <p className="text-sm">
  Status:{" "}
  <span
    className={`inline-block px-2 py-1 rounded text-white text-xs font-medium ${
      req.status === "pending"
        ? "bg-yellow-500"
        : req.status === "accepted"
        ? "bg-green-600"
        : "bg-red-600"
    }`}
  >
    {req.status}
  </span>
</p>

          </li>
          
        ))}
      </ul>
    )}
  </div>
</div>

            

            <div className="bg-indigo-50 border border-indigo-200 p-6 rounded-xl">
              <h3 className="text-lg font-semibold mb-2 text-indigo-700">🌟 Trending Skills</h3>
              <ul className="text-gray-700 list-disc ml-6 space-y-1 text-sm">
                <li>Resume Building Tips for Placements</li>
                <li>Getting Started with React</li>
                <li>Debugging Code Faster (Live Demo)</li>
              </ul>
            </div>
          </section>
        </div>
      </div>


                {bookingModalOpen && selectedSkillForBooking && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg shadow-lg w-[90%] max-w-md">
              <h2 className="text-xl font-semibold mb-4">Book Session</h2>
              <p className="mb-2 text-gray-700">
                <strong>Skill:</strong> {selectedSkillForBooking.title}
              </p>
              <p className="mb-4 text-sm text-gray-500">
                With: {selectedSkillForBooking.userEmail}
              </p>

              <input
                type="datetime-local"
                className="w-full border p-2 rounded mb-4"
                value={selectedTimeSlot}
                onChange={(e) => setSelectedTimeSlot(e.target.value)}
              />

              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setBookingModalOpen(false)}
                  className="text-gray-600 hover:underline"
                >
                  Cancel
                </button>
                <button
                  onClick={handleBookingSubmit}
                  className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
                >
                  Confirm
                </button>
              </div>
            </div>
          </div>
        )}


        {rescheduleModalOpen && bookingToReschedule && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div className="bg-white p-6 rounded-lg shadow-lg w-[90%] max-w-md">
      <h2 className="text-xl font-semibold mb-4">Reschedule Booking</h2>
      <p className="mb-2 text-gray-700">
        <strong>Skill:</strong> {bookingToReschedule.skillTitle}
      </p>

      <input
        type="datetime-local"
        className="w-full border p-2 rounded mb-4"
        value={newTimeSlot}
        onChange={(e) => setNewTimeSlot(e.target.value)}
      />

      <div className="flex justify-end gap-3">
        <button
          onClick={() => setRescheduleModalOpen(false)}
          className="text-gray-600 hover:underline"
        >
          Cancel
        </button>
        <button
          onClick={handleRescheduleBooking}
          className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
        >
          Confirm New Time
        </button>
      </div>
    </div>
  </div>
)}

<div className="mt-10">
  <h3 className="text-xl font-semibold text-gray-700 mb-4">🗓 Calendar View</h3>
  <Calendar
    localizer={localizer}
    events={calendarEvents}
    startAccessor="start"
    endAccessor="end"
    style={{ height: 500 }}
  />
</div>


    </main>
  );
}
